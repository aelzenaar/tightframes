import matlab.engine
from pathlib import Path
import argparse
import sys
import shutil
from datetime import datetime

def print_header(f, title, magma):
    f.write(f'''<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8"/>
        <title>Index of generated designs</title>
    </head>
    <body>
        <h1>Index of generated designs from directory {search_dir.resolve()}</h1>
        <h2>Key of colours</h2>
        <table border="1px" cellspacing="0" cellpadding="3">
            <tr>
                <td style="background-color: #ff8080">error &lt; 10^-12</td>
                <td style="background-color: #ffdd80">error &lt; 10^-9</td>
                <td style="background-color: #87c9ff">error &lt; 10^-4</td>
                <td style="background-color: #80ffc2">error &lt; 1</td>
                <td style="background-color: #ffffff">error â‰¥ 1</td>
            </tr>
        </table>
        <h2>List of designs</h2>
        <table border="1px" cellspacing="0" cellpadding="3">
            <tr>
                <th><i>t</i></th>
                <th><i>d</i></th>
                <th><i>n</i></th>
                <th>error (short)</th>
                <th>error (long)</th>
                <th>comment</th>
                <th>link to .mat file</th>
                {'<th>link to magma file</th>' if magma else ''}
            </tr>\n''')

def print_footer(f):
    f.write(f'''
        </table>
        <footer>This page was generated by {sys.argv[0]} at: {datetime.today().ctime()}</footer>
    </body>
</html>''')









parser = argparse.ArgumentParser(description='Generate a database of designs from a given set of runtf.m output files.')
parser.add_argument('directory', metavar='DIR', help='directory to scan')
parser.add_argument('-R','--recursive', action='store_true', help='scan DIR recursively')
parser.add_argument('-e','--existing', action='count', default=0, help='connect to a running MATLAB session; specify twice to skip MATLAB verification prompt')
parser.add_argument('-t','--threshold', action='store', default=0, help='threshold to include, error must be < 10^-t')
parser.add_argument('-o','--output', default='html', help='output directory')
parser.add_argument('-u','--unique', action='count', default = 0, help='keep only the best value for each t,d,n; specify twice to only keep the best n meeting the threshold')
parser.add_argument('-m','--magma', action='store_true', help='also generate magma files')

args = parser.parse_args()
search_dir = Path(args.directory)
if not search_dir.is_dir():
    sys.exit('Argument is not a directory.')

output_dir = Path(args.output)
output_dir.mkdir(parents=True,exist_ok=True)
recurse = (args.recursive == True)
existing = args.existing
threshold = int(args.threshold)
unique = args.unique
magma = args.magma

if recurse:
    mat_files = sorted(list(search_dir.glob('**/*.mat')))
else:
    mat_files = sorted(list(search_dir.glob('*.mat')))

designs = []

# -e but not -ee specified, so print usage and wait for user OK.
if existing == 1:
    print('In the running MATLAB session enter the command:\tmatlab.engine.shareEngine')
    input("Press Enter to continue...")


if existing > 0:
    if(matlab.engine.find_matlab() == ()):
        sys.exit('MATLAB is not running, or you didn\'t heed the prompt...')
    eng = matlab.engine.connect_matlab()
else:
    eng = matlab.engine.start_matlab()

for f in mat_files:
    matfile = eng.matfile(str(f.resolve()))
    if eng.getfield(matfile,'result') == None:
        print(f'Saw {str(f)}\t\tNo result array.')
        continue
    print(f'Saw {str(f)}\t\tand parsing.')

    new_design = {}
    new_design['t'] = int(eng.getfield(matfile,'t'))
    new_design['d'] = int(eng.getfield(matfile,'d'))
    new_design['n'] = int(eng.getfield(matfile,'n'))

    # Try really hard to get the error out of the Matlab array it may or may not be wrapped in
    error_pack = eng.getfield(matfile,'errors');
    try:
      new_design['error'] = float(error_pack[0][-1])
    except:
      try:
        new_design['error'] = float(error_pack)
      except:
        pass
    if not ('error' in new_design):
      print('Failed to parse error ', error_pack)
      continue


    try:
      new_design['comment'] = str(eng.getfield(matfile,'comment'))
    except:
      new_design['comment'] = ''

    # Produce output filenames
    relative_filename = output_dir/f.relative_to(search_dir)
    new_design['original_file'] = f
    new_design['filename'] = relative_filename.relative_to(output_dir)

    # Magma data
    if magma:
      new_design['magma_file'] = new_design['filename'].with_suffix('.magma')

      unit = 'i'
      field = 'CC'
      var = 'V'
      accuracy = '15'
      d = new_design['d']
      n = new_design['n']

      result = eng.getfield(matfile,'result')
      reals = eng.real(result);
      imags = eng.imag(result);

      magma_string = f'{var}:=Matrix({field},{d},{n},[\n'
      for i in range(0,d):
          for j in range(0,n):
              magma_string += f'    {reals[i][j]:.{accuracy}} + {imags[i][j]:.{accuracy}}*{unit}'
              if not ((i == d - 1) and (j == n - 1)):
                  magma_string += ',\n'
      magma_string += '\n]);\n'
      new_design['magma_text'] = magma_string


    if new_design['error'] > (10**(-threshold)):
      continue

    is_admissible = True
    if unique == 1:
      for design in list(designs):
        if design['t'] == new_design['t'] and design['d'] == new_design['d'] and design['n'] == new_design['n']:
          is_admissible = False
          if design['error'] > new_design['error']:
            designs.remove(design)
            is_admissible = True

    if unique == 2:
      for design in list(designs):
        if design['t'] == new_design['t'] and design['d'] == new_design['d']:
          is_admissible = False
          if design['n'] == new_design['n'] and design['error'] > new_design['error']:
            designs.remove(design)
            is_admissible = True
          if design['n'] > new_design['n']:
            designs.remove(design)
            is_admissible = True

    if is_admissible:
      designs.append(new_design)

designs = sorted(designs, key=lambda k: k['error'])
designs = sorted(designs, key=lambda k: k['n'])
designs = sorted(designs, key=lambda k: k['d'])
designs = sorted(designs, key=lambda k: k['t'])


with (output_dir/'index.html').open(mode='w') as f:
    print_header(f,search_dir.resolve(),magma)
    for design in designs:
        # Copy matlab file
        (output_dir/design['filename']).parent.mkdir(parents=True,exist_ok=True)
        shutil.copy(design['original_file'],output_dir/design['filename'])

        # Produce magma file
        if magma:
            with open(output_dir/design['magma_file'], 'w') as mf:
                mf.write(design['magma_text'])
            magma_file = design['magma_file'] # Get around the fact we can't index into a dict in a nested format string

        f.write(f'''            <tr style="background-color: {'#ff8080' if design['error'] < 1e-12 else '#ffdd80' if design['error'] < 1e-9 else '#87c9ff;' if design['error'] < 1e-4 else '#80ffc2' if design['error'] < 1 else '#fff'}">
                <td>{design['t']}</td>
                <td>{design['d']}</td>
                <td>{design['n']}</td>
                <td>{'%E'%design['error']}</td>
                <td>{design['error']}</td>
                <td>{design['comment']}</td>
                <td><a href="{design['filename']}">{design['filename']}</a></td>
                {f'<td><a href="{magma_file}">{magma_file}</a></td>' if magma else ''}
            </tr>'''
        )
    print_footer(f)
